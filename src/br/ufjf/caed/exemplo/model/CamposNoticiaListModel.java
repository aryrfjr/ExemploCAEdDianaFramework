package br.ufjf.caed.exemplo.model;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.HashMap;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import org.dianaframework.view.BusinessObjectsCollection;
import org.dianaframework.view.CollectionModel;

/**
 *
 * Abstract list model for br.ufjf.caed.exemplo.model.CamposNoticia objects;
 * Generated by Diana Framework. DO NOT EDIT!!!
 *
 */
public class CamposNoticiaListModel extends AbstractListModel implements ComboBoxModel, CollectionModel {
private List objects;

private Object[] selected;

private BusinessObjectsCollection boc;
private JComponent list;
private HashMap<String, String> parameters = new HashMap();

    public CamposNoticiaListModel() {
        objects = new ArrayList();
    }

    public void setSelectedItem(int item) {
        if (objects.size() > 0)
            selected = (Object[])objects.get(item);
    }

    public void setSelectedItem(Object item) {
        int inc = 0;
        for (; inc < objects.size(); inc++) {
            if (item != null && ((Object[])objects.get(inc))[0].equals(item)) {
                selected = (Object[])objects.get(inc);
                break;
            }
        }
    }

    public Object getSelectedItem() {
        return selected == null ? "" : selected[0];
    }

    public Object getElementAt(int ind) {
        return selected == null ? "" : ((Object[])objects.get(ind))[0];
    }

    public int getSize() {
        return objects.size();
    }

    public void setBusinessObjectsCollection(BusinessObjectsCollection boc) {
        this.boc = boc;
    }

    public void setObjectsCollection(List objects) {
        this.objects = objects;
        if (objects != null && objects.size() > 0) {
            selected = (Object[])objects.get(0);
            setSelectedIndex(0);
        } else {
            selected = null;
        }
        ((JComboBox)list).updateUI();
    }

    public List getObjects() {
        return objects;
    }

    public void reload() {
        boc.setParameters(parameters);
        objects = boc.collection();
    }

    public Object getSelectedObject() {
        return selected[1];
    }

    public String getSelectedValue() {
        return selected == null ? "" : (String)selected[1];
    }

    public Object getObjectAt(int index){
        return objects.get(index);
    }

    public void setObjects(List<Object[]> val) {
        this.objects = val;
    }

    public Object[] getSelected() {
        return selected;
    }

    public void addObject(Object obj) {
        objects.add(obj);
    }

    public void removeAll() {
        objects.clear();
    }

    public Object removeObject(int index) {
        return null;
    }

    public Object removeObject(Object obj) {
        return objects.remove(obj);
    }

    public Object removeSelectedObject() {
        for (int inc = 0; inc < objects.size(); inc++) {
            if (objects.get(inc) == selected) {
                return objects.remove(inc);
            }
        }
        return null;
    }

    public void setSelectedObject(Object obj) {
        Iterator objs = objects.iterator();
        Object objcmp;
        while (objs.hasNext()) {
            objcmp = objs.next();
            // @todo 01022007: Problemas com o combo condicao final em jdlgEfetuarMatriculaAluno.java
            if (((Object[])objcmp)[1].equals(obj)) {
                selected = (Object[])objcmp;
                return;
            }
        }
        if (objects.size() > 0)
            selected = (Object[])objects.get(0);
    }

    public void setSelected(Object[] val) {
        this.selected = val;
    }

    public BusinessObjectsCollection getBoc() {
        return boc;
    }

    public void setBoc(BusinessObjectsCollection val) {
        this.boc = val;
    }

    public void setUIReference(Object list) {
        this.list = (JComponent)list;
    }

    public JComponent getUIReference() {
        return list;
    }

    public List getSelectedObjects() {
        return null;
    }

    public void setColumnsOrder(int[] columnsOrder) {
    }

    private void setSelectedIndex(int item) {
        if (list instanceof JComboBox) {
            ActionListener[] al = ((JComboBox)list).getActionListeners();
            // Removing all listeners before set the selected index
            for (int inc = 0; inc < al.length; inc++)
                ((JComboBox)list).removeActionListener(al[inc]);
            ((JComboBox)list).setSelectedIndex(item);
            // Put again all listeners after set the selected index
            for (int inc = 0; inc < al.length; inc++)
                ((JComboBox)list).addActionListener(al[inc]);
        }
    }

    public void setParameters(HashMap<String, String> parameters) {
        this.parameters = parameters;
    }
    public HashMap<String, String> getParameters() {
        return parameters;
    }

    public void addParameter(String name, String value) {
        parameters.put(name, value);
    }

    public void sortByColumn(int column, boolean isAscent) {}

}
