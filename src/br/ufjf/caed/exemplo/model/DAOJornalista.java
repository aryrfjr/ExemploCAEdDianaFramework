package br.ufjf.caed.exemplo.model;

import java.sql.SQLException;
import java.util.Collection;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Expression;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.dao.DataAccessException;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.Criteria;
import org.springframework.orm.hibernate3.HibernateCallback;

/**
 *
 * Spring DAO Support implementation for Jornalista.
 * Generated by Diana Framework. DO NOT EDIT!!!
 *
 */
public class DAOJornalista extends HibernateDaoSupport {
    private final String DOMAIN_CLASS = "br.ufjf.caed.exemplo.model.Jornalista";

    public Collection getAll() {
        return getHibernateTemplate().find("from "+DOMAIN_CLASS+" as o");
    }
    public Collection query(final String consulta) {
        return (Collection)getHibernateTemplate().find(consulta);
    }
    public Collection querySQL(final String consulta, final Class classe) {
        SQLQuery qry = getSession().createSQLQuery(consulta).addEntity(classe);
        return (Collection)qry.list();
    }
    public Object get(final int id) {
        return getHibernateTemplate().get(Jornalista.class, new Integer(id));
    }
    public Object get(final long id) {
        return getHibernateTemplate().load(Jornalista.class, new Long(id));
    }
    public Object get(final Integer id) {
        return getHibernateTemplate().load(Jornalista.class, id);
    }
    public Object get(final Long id) {
        return getHibernateTemplate().load(Jornalista.class, id);
    }
    public void deleteAll() {
        getHibernateTemplate().delete("from "+DOMAIN_CLASS+" as o");
    }
    public void delete(final int id) {
        getHibernateTemplate().delete(getHibernateTemplate().load(Jornalista.class, new Integer(id)));
    }
    public void delete(final long id) {
        getHibernateTemplate().delete(getHibernateTemplate().load(Jornalista.class, new Long(id)));
    }
    public void delete(final Integer id) {
        getHibernateTemplate().delete(getHibernateTemplate().load(Jornalista.class, id));
    }
    public void delete(final Long id) {
        getHibernateTemplate().delete(getHibernateTemplate().load(Jornalista.class, id));
    }
    public void delete(final Object objeto) {
        getHibernateTemplate().delete(objeto);
    }
    public void delete(final String consulta) {
        getHibernateTemplate().delete(consulta);
    }

    public void save(final Object objeto) {
        getHibernateTemplate().save(objeto);
    }
    public void update(final Object objeto) {
        getHibernateTemplate().update(objeto);
    }
    public void setORMReference(Object mp) {}
    public Collection getByCriteria(DetachedCriteria detachedCriteria) throws DataAccessException {
    	return getHibernateTemplate().findByCriteria(detachedCriteria);
    }

    public Object getFirstIndexByCriteria(DetachedCriteria detachedCriteria) throws DataAccessException {
        return getHibernateTemplate().findByCriteria(detachedCriteria).get(0);
    }

    public final DetachedCriteria getDetachedCriteria() throws DataAccessException {
    	return DetachedCriteria.forEntityName(DOMAIN_CLASS);
    }
    public Object getUniqueResultCriteria(final String field, final Integer value) throws DataAccessException {
        return (Object) this.getHibernateTemplate().execute(
                new HibernateCallback() {
            public Object doInHibernate(Session session)
            throws HibernateException, SQLException {
                Criteria criteria = session.createCriteria(DOMAIN_CLASS)
                .add(Expression.eq(field, value));
                return criteria.uniqueResult();
            }
        });
    }
}